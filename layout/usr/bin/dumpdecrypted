#!/bin/bash

function dec
{
	#check that there is an argument
	if [ "$1" != "" ]; then
		echo
		echo "Decrypting $1"
		echo
		DYLD_INSERT_LIBRARIES=/usr/lib/dumpdecrypted.dylib $1
		echo
	else
		echo "You must pass in a mach-o binary."
		exit 1
	fi
}

function app
{
	#check that there is an argument
	if [ "$1" != "" ]; then
		echo
		echo "Locating $1 in /var/mobile/Applications"

		#Search for the app
		dir=$(find /var/mobile/Applications -maxdepth 2 -iname $1.app)

		#check that the app was found
		if [ "$dir" != "" ]; then
			binary=$dir/$1
			echo "Located $1 at: $binary"
			printf "Exit (e), Decrypt (d) or Decrypt/Class-Dump (dump)? "
			read choice
			case $choice in
				d)    dec $binary ;;  #decrypt the binary
				dump) dump $binary ;; #decrypt and dump the binary
				*) ;;                 #do nothing
			esac
		else
			echo "App $1 not located"
			echo
			exit 1
		fi
	fi
}

function dump
{
	#check that class-dump-z is installed
	if [ ! -e /usr/bin/class-dump-z ]; then
		echo
		echo "Cannot find class-dump-z in /usr/bin"
		echo "You should do this:"
		echo "cd /tmp"
		echo "wget http://networkpx.googlecode.com/files/class-dump-z_0.2a.tar.gz"
		echo "tar xzf class-dump-z_0.2a.tar.gz"
		echo "mv class-dump-z_0.2a/iphone_armv6/class-dump-z /usr/bin"
		echo
		exit 1
	fi

	#decrypt the binary first
	dec $1

	printf "Where would you like these headers dumped to? [./headers] "
	read dir
	
	#if the input is "", dump to default directory
	if [ $dir != "" ]; then
		class-dump-z -H *.decrypted -o $dir
	else
		echo "Dumping to ./headers"
		class-dump-z -H *.decrypted -o ./headers
	fi
	echo
}

function h
{
	echo
	echo "Usage : dumpdecrypted [option] [file]"

	echo -e '-h \t\tDisplay this help message'
	echo -e '-app [AppName]\tDecrypt an app with the given name'
	echo -e '[file]\t\tDecrypt the given binary'
	echo -e '-dump [file] \tDump an already decrypted binary file'
	echo
}

case $1 in
	-dec)  dec $2 ;;  #decrypt binary
	-app)  app $2 ;;  #decrypt binary with name $2, located in /var/mobile/Applications/*
	-dump) dump $2 ;; #decrypt binary and dump headers to ./headers/BinaryName
	''|-h) h ;;		  #display help message
	*)     dec $2 ;;  #if there are no options, decrypt the binary
esac